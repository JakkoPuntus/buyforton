#! /usr/bin/env python
# -*- coding: utf-8 -*-

import telebot
from config import TOKEN, ADMIN_ID, nextAdmin, hello_text, form

bot = telebot.TeleBot(TOKEN, num_threads = 4)

markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True)
markup_appeal = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True)
markup_photo = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True)

mkp_newproduct = telebot.types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
mkp_newservice = telebot.types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É')
mkp_support = telebot.types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É')
mkp_donate = telebot.types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
mkp_cancel = telebot.types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å')
mkp_skip = telebot.types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
mkp_vip = telebot.types.KeyboardButton('–ö—É–ø–∏—Ç—å VIP üíé')

markup.row(mkp_newproduct, mkp_newservice)
markup.row(mkp_donate, mkp_support)
markup_appeal.row(mkp_cancel)
markup_photo.row(mkp_cancel, mkp_skip)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, hello_text, reply_markup = markup)

@bot.message_handler(commands=["ban"])
def ban_user(message):
    bot.kick_chat_member(message.chat.id, message.chat.id)

@bot.message_handler(regexp = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä")
@bot.message_handler(regexp = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É")
def def_name(message):
    global log
    global name
    global isItItem
    name = str(message.chat.id) + ".txt"
    try:
        log = open(name, "x", encoding = "utf-8")
    except:
        log = open(name, "r+", encoding = "utf-8")
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ:", reply_markup = markup_appeal)
    if message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä":
        msg = bot.send_message(message.chat.id, "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup = markup_appeal)
        isItItem = True
        log.write("#—Ç–æ–≤–∞—Ä \n")
    else:
        msg = bot.send_message(message.chat.id, "1. –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏", reply_markup = markup_appeal)
        isItItem = False
        log.write("#—É—Å–ª—É–≥–∞ \n")

    bot.register_next_step_handler(msg, description)

def description(message):
    global log
    global isItItem
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        if isItItem:
            msg = bot.send_message(message.chat.id, "2. –û–ø–∏—Å–∞–Ω–∏–µ  —Ç–æ–≤–∞—Ä–∞", reply_markup = markup_appeal)
        else:
            msg = bot.send_message(message.chat.id, "2. –û–ø–∏—Å–∞–Ω–∏–µ  —É—Å–ª—É–≥–∏", reply_markup = markup_appeal)
        log.write("–ù–∞–∑–≤–∞–Ω–∏–µ: " + message.text + "\n")
        bot.register_next_step_handler(msg, price)

def price(message):
    global log
    global isItItem
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        if isItItem:
            msg = bot.send_message(message.chat.id, "3. –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞", reply_markup = markup_appeal)
        else:
            msg = bot.send_message(message.chat.id, "3. –¶–µ–Ω–∞ —É—Å–ª—É–≥–∏", reply_markup = markup_appeal)
        log.write("–û–ø–∏—Å–∞–Ω–∏–µ: " + message.text + "\n")
        if isItItem:
            bot.register_next_step_handler(msg, delivery)
        else:
            bot.register_next_step_handler(msg, city)

def delivery(message):
    global log
    global isItItem
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        log.write("–¶–µ–Ω–∞: " + message.text + "\n")
        msg = bot.send_message(message.chat.id, "4.–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–ë (—Ü–µ–Ω–∞ –∏ —É—Å–ª–æ–≤–∏—è)", reply_markup = markup_appeal)
        bot.register_next_step_handler(msg, seller)

def city(message):
    global log
    
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        log.write("–¶–µ–Ω–∞: " + message.text + "\n")
        msg = bot.send_message(message.chat.id, "4. –í–∞—à –≥–æ—Ä–æ–¥", reply_markup = markup_appeal)
        bot.register_next_step_handler(msg, seller)
        
def seller(message):
    global log
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        if isItItem:
            log.write("–î–æ—Å—Ç–∞–≤–∫–∞: " + message.text + "\n")
        else:
            log.write("–ì–æ—Ä–æ–¥: " + message.text + "\n")
        msg = bot.send_message(message.chat.id, "5. –í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username)", reply_markup = markup_appeal)
        bot.register_next_step_handler(msg, image)

def image(message):
    global log
    global isItItem
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        log.write("–ü—Ä–æ–¥–∞–≤–µ—Ü: " + message.text + "\n")
        msg = bot.send_message(message.chat.id, "6. –§–æ—Ç–æ", reply_markup = markup_photo)
        log.close()
        bot.register_next_step_handler(msg, finishing)

def finishing(message):
    global log
    global name
   
    
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        loger = open(name, "r", encoding = "utf-8")
        appeal = loger.read()
        try:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                bot.send_message(ADMIN_ID, appeal)
            else:
                bot.send_photo(ADMIN_ID, message.photo[1].file_id,appeal)
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", reply_markup=markup)
        except:
            msg = bot.send_message(message.chat.id, "–£–ø—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup_appeal)
            bot.register_next_step_handler(msg, finishing)
        try:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                bot.send_message(nextAdmin, appeal)
            else:
                bot.send_photo(nextAdmin , message.photo[1].file_id,appeal)
            
        except Exception as e:
            print("blya")
            print(e)

            



bot.enable_save_next_step_handlers(delay = 2)
bot.load_next_step_handlers()

@bot.message_handler(regexp = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")
def support_first(message):
    msg = bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º", reply_markup = markup_appeal)
    bot.register_next_step_handler(msg, support)

def support(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = markup)
    else:
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        bot.forward_message(nextAdmin, message.chat.id, message.message_id)
        bot.send_message(message.chat.id, "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –º—ã –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º", reply_markup = markup)

@bot.message_handler(regexp = "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
def donate(message):
    photo = open("img/qr_vip.png", "rb")
    bot.send_photo(message.chat.id, photo, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TON –ø–æ –∞–¥—Ä–µ—Å—É: 0:662c32971dbe7d21d71eee8e3f2a0bf8adb73521ee3779090a4910b7742b0b2f –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥")
    
@bot.message_handler(regexp = "–ö—É–ø–∏—Ç—å VIP üíé")
def buy_vip(message):
    photo = open("img/qr_vip.png", "rb")
    bot.send_photo(message.chat.id, photo, "–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ n TON –ø–æ –∞–¥—Ä–µ—Å—É: 0:662c32971dbe7d21d71eee8e3f2a0bf8adb73521ee3779090a4910b7742b0b2f –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ (QR –ø–æ–∫–∞ –Ω–µ —Ç–æ—Ç)")

@bot.message_handler(content_types = ["text"])
def repeat_all_messages(message):
    if message.chat.id == ADMIN_ID:
        try:
            print(message.reply_to_message.message_id)
            bot.send_message(message.reply_to_message.chat.id, message.text,  reply_markup = markup)
        except Exception as e:
            print(e)





if __name__ == "__main__":
    try: 
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        pass