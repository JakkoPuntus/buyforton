#! /usr/bin/env python
# -*- coding: utf-8 -*-

import telebot
import markups
import regexps
import transaction_checker
import pymysql.cursors
import config
import withdraw
import logging
from config import TOKEN, ADMIN_ID, nextAdmin, hello_text, TON_ADRESS, admins_list
import os

bot = telebot.TeleBot(TOKEN, num_threads=4, parse_mode="HTML")
logging.basicConfig(level=logging.DEBUG)


@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    buying = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    connection = pymysql.connect(
        host="localhost",
        user="root",
        password="9R3BhW049TF6",
        database="buyforton",
        cursorclass=pymysql.cursors.DictCursor
    )
    if message.text == "/start":
        bot.send_message(message.chat.id, hello_text,
                         reply_markup=markups.main)
    else:
        buy_id = message.text.replace("/start ", "")
        try:
            with connection:

                with connection.cursor() as cursor:
                    # Read a single record
                    sql = "SELECT `nickname`, `chat_id`, `quantity` FROM `buyforton_appeals` WHERE `message_id`=%s"
                    cursor.execute(sql, (buy_id))
                    result = cursor.fetchone()
            quantity = result['quantity']
            if quantity != 0:
                buy_message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä ‚Ññ{res}\n –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º <a href=\"tg://user?id={id}\">{nickname}</a> –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± —É—Å–ª–æ–≤–∏—è—Ö –¥–æ—Å—Ç–∞–≤–∫–∏.\n –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–æ —Å–≤—è–∑–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º, —Ä–æ–≤–Ω–æ –∫–∞–∫ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–ø—Ä—è–º—É—é —É –ø—Ä–æ–¥–∞–≤—Ü–∞. –í —ç—Ç–∏—Ö —Å–ª—É—á–∞—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏.".format(
                    res=buy_id, id=result['chat_id'], nickname=result['nickname']
                )
                buying.row("–û–ø–ª–∞—Ç–∏—Ç—å " + str(buy_id))
                bot.send_message(message.chat.id, buy_message,
                                 reply_markup=buying)
            else:
                bot.send_message(
                    message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω, –∏ –º—ã –Ω–µ —É—Å–ø–µ–ª–∏ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.", reply_markup=markups.main)
        except Exception as e:
            bot.send_message(message.chat.id, str(buy_id), reply_markup=buying)
            print(e)


@bot.message_handler(commands=["ban"])
def ban_user(message):
    bot.send_message(
        message.chat.id, '<a href="tg://user?id=564941525">–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏</a>')


@bot.message_handler(commands=["accept"])
def acception(message):
    try:
        if message.chat.id in config.admins_list:
            inline = message.reply_to_message.reply_markup
            new_channel = None
            if message.text.find("!") != -1:
                index = message.text.index("!")+1
                new_category = message.text[index:]
                new_category = new_category.replace(" ", "")

            try:
                channel_to_send = "dmth"
                if message.reply_to_message.text != None:
                    for i in message.reply_to_message.text.split("\n"):
                        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in i:
                            channel_to_send = i
                            print(channel_to_send)
                elif message.reply_to_message.caption != None:
                    for i in message.reply_to_message.caption.split("\n"):
                        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in i:
                            channel_to_send = i
                if message.text.find('!') != -1:
                    index = message.text.index("!")+1
                    new_channel = message.text[index:]
                    new_channel = new_channel.replace(" ", "")

                    try:
                        a = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + \
                            message.reply_to_message.text.replace(
                                channel_to_send, config.commands[new_channel])
                        print(a)
                        bot.edit_message_text(
                            a,
                            message.chat.id,
                            message.reply_to_message.id,
                            reply_markup=inline
                        )
                    except:
                        a = message.reply_to_message.caption.replace(
                            channel_to_send, config.commands[new_channel])

                        print(a)
                        bot.edit_message_caption(
                            a,
                            message.chat.id,
                            message.reply_to_message.id,
                            reply_markup=inline
                        )
                channel_to_send = channel_to_send.replace('–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ', '')
                if new_channel != None:
                    channel_to_send = config.commands[new_channel]
                    channel_to_send = channel_to_send.replace('–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ', '')
                print(channel_to_send)
                print(config.categories[channel_to_send])
                print()
                try:
                    bot.send_message(
                        config.categories[channel_to_send], message.reply_to_message.text, reply_markup=inline)
                except:
                    photo = message.reply_to_message.photo[1].file_id
                    print(message.reply_to_message.text)
                    bot.send_photo(config.categories[channel_to_send], photo,
                                message.reply_to_message.caption, reply_markup=inline)

            except Exception as e:
                print(e)
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, e, reply_markup = markups.main)


@bot.message_handler(regexp=regexps.newproduct)
@bot.message_handler(regexp=regexps.newservice)
def def_category(message):
    global log
    global name
    global isItItem
    name = str(message.chat.id) + ".txt"

    try:
        log = open(name, "x+", encoding="utf-8")
    except:
        log = open(name, "r+", encoding="utf-8")
        log.truncate(0)

    if message.text == regexps.newproduct:
        msg = bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",
            reply_markup=markups.categories
        )
        isItItem = True
        log.write("#—Ç–æ–≤–∞—Ä \n")
    else:
        msg = bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=markups.categories_service
        )
        isItItem = False
        log.write("#—É—Å–ª—É–≥–∞ \n")
    bot.register_next_step_handler(msg, def_name)


def def_name(message):
    global log
    global name
    global isItItem
    try:
        if message.text in config.categories and message.text != 'üíµüíé–û–ø–ª–∞—Ç–∞ –∑–∞ TON' and message.text != 'ü§ù–ü—Ä–æ—á–∏–µ —É—Å–ª—É–≥–∏':
            msg = bot.send_message(
                message.chat.id, "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=markups.appeal
            )
            isItItem = True
            log.write("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + message.text + "\n")
        else:
            msg = bot.send_message(
                message.chat.id, "1. –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏", reply_markup=markups.appeal
            )
            isItItem = False
            log.write("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + message.text + "\n")
    except Exception as e:
        print(e)
    bot.register_next_step_handler(msg, description)


def description(message):
    global log
    global isItItem
    global itemName
    itemName = message.text

    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        if isItItem:
            msg = bot.send_message(
                message.chat.id, "2. –û–ø–∏—Å–∞–Ω–∏–µ  —Ç–æ–≤–∞—Ä–∞  (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup=markups.appeal
            )
        else:
            msg = bot.send_message(
                message.chat.id, "2. –û–ø–∏—Å–∞–Ω–∏–µ  —É—Å–ª—É–≥–∏  (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup=markups.appeal
            )
        log.write("–ù–∞–∑–≤–∞–Ω–∏–µ: " + message.text + "\n")
        bot.register_next_step_handler(msg, def_price)


def def_price(message):
    global log
    global isItItem
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        if len(message.text) > 1000:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ–Ω—å—à–µ –±—É–∫–≤")
            bot.register_next_step_handler(msg, def_price)
        else:
            if isItItem:
                msg = bot.send_message(
                    message.chat.id,
                    "3. –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ TON (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –º–∏–Ω–∏–º—É–º 2)",
                    reply_markup=markups.appeal,
                )
            else:
                msg = bot.send_message(
                    message.chat.id,
                    "3. –¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ –≤ TON (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –º–∏–Ω–∏–º—É–º 2)",
                    reply_markup=markups.appeal,
                )
            log.write("–û–ø–∏—Å–∞–Ω–∏–µ: " + message.text + "\n")
            bot.register_next_step_handler(msg, quantity_def)


def quantity_def(message):
    global log
    global isItItem
    global price
    price = message.text
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        try:
            float(price)
            if float(price) < 2:
                msg = bot.send_message(
                    message.chat.id, "–ú–∏–Ω–∏–º—É–º 2!", reply_markup=markups.appeal)
                bot.register_next_step_handler(msg, quantity)
            else:
                log.write("–¶–µ–Ω–∞: " + message.text + "üíé\n")
                if isItItem:
                    msg = bot.send_message(
                        message.chat.id, '4. –°–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)', reply_markup=markups.appeal)
                    bot.register_next_step_handler(msg, delivery)
                else:
                    msg = bot.send_message(message.chat.id, '4. –í–∞—à–∞ —É—Å–ª—É–≥–∞:',
                                           reply_markup=markups.isServiceReusable)
                    bot.register_next_step_handler(msg, city)
        except Exception as e:
            msg = bot.send_message(
                message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=markups.appeal)
            bot.register_next_step_handler(msg, quantity_def)
            print(e)


def delivery(message):
    global log
    global quantity
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        quantity = message.text
        try:
            int(quantity)
            if quantity == 0:
                msg = bot.send_message(
                    message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=markups.appeal)
                bot.register_next_step_handler(msg, delivery)
            else:
                msg = bot.send_message(
                    message.chat.id, '5. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–ë (—Ü–µ–Ω–∞ –∏ —É—Å–ª–æ–≤–∏—è)', reply_markup=markups.appeal)
                bot.register_next_step_handler(msg, TON_wallet)

        except:
            msg = bot.send_message(
                message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=markups.appeal)
            bot.register_next_step_handler(msg, delivery)


def city(message):
    global log
    global isItItem
    global quantity
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        quantity = message.text
        
        if quantity != "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è" and quantity != '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è':
            msg = bot.send_message(
                message.chat.id, "–ù–µ –±–∞–ª—É–π—Å—è! –í—ã–±–µ—Ä–∏ –µ—â–µ —Ä–∞–∑.", reply_markup=markups.isServiceReusable)
            bot.register_next_step_handler(msg, city)
        elif quantity == "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è":
            quantity = 1024
            msg = bot.send_message(message.chat.id, '5. –ì–æ—Ä–æ–¥')
            bot.register_next_step_handler(msg, guarantee)
        elif quantity == "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è":
            quantity = 1
            msg = bot.send_message(message.chat.id, '5. –ì–æ—Ä–æ–¥')
            bot.register_next_step_handler(msg, guarantee)


def guarantee(message):
    global isItItem
    grnt = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    grnt_yes = telebot.types.KeyboardButton("–î–∞")
    grnt_no = telebot.types.KeyboardButton("–ù–µ—Ç")

    grnt.row(grnt_yes, grnt_no)
    grnt.row(markups.cancel)

    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        if isItItem:
            log.write("–î–æ—Å—Ç–∞–≤–∫–∞: " + message.text + "\n")
        else:
            log.write("–ì–æ—Ä–æ–¥: " + message.text + "\n")
        msg = bot.send_message(
            message.chat.id,
            "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞?",
            reply_markup=grnt,
        )
        bot.register_next_step_handler(msg, TON_wallet)


def TON_wallet(message):
    global log
    global isItItem
    global isGuaranteed
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        if isItItem:
            log.write("–î–æ—Å—Ç–∞–≤–∫–∞: " + message.text + "\n")
        else:
            log.write("–ì–æ—Ä–æ–¥: " + message.text + "\n")
        try:
            log.write('–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href="tg://user?id=' + str(message.chat.id) +
                        '">' + message.from_user.first_name + '</a> \n')
        except:
            log.write("–ü—Ä–æ–¥–∞–≤–µ—Ü: –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è —Å–∫—Ä—ã—Ç–æ \n")
        if isItItem == True:
            msg = bot.send_message(
                message.chat.id,
                "7. –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=markups.appeal,
            )
            isGuaranteed = True
            bot.register_next_step_handler(msg, image)
        else:
            if message.text == "–ù–µ—Ç" or message.text == "–Ω–µ—Ç":
                isGuaranteed = False
                msg = bot.send_message(
                    message.chat.id, "7. –§–æ—Ç–æ", reply_markup=markups.photo)
                log.close()
                bot.register_next_step_handler(
                    msg, finishing, wallet="none")
            else:
                isGuaranteed = True
                msg = bot.send_message(
                    message.chat.id,
                    "7. –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞",
                    reply_markup=markups.appeal,
                )
                bot.register_next_step_handler(msg, image)


def image(message):
    global log
    global isItItem
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        msg = bot.send_message(message.chat.id, "–§–æ—Ç–æ",
                               reply_markup=markups.photo)
        log.close()
        bot.register_next_step_handler(msg, finishing, wallet=message.text)


def finishing(message, wallet):
    global log
    global price
    global isGuaranteed
    global isItItem
    global quantity

    if isItItem:
        item_type = "item"
    else:
        item_type = "service"

    url = "t.me/buyforton_bot?start=" + str(message.message_id)
    if isGuaranteed:
        inline = telebot.types.InlineKeyboardMarkup()
        appeal_btn = telebot.types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", url=url)
        inline.add(appeal_btn)
    else:
        inline = None

    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        loger = open(name, "r", encoding="utf-8")
        appeal = loger.read()
        try:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                bot.send_message(ADMIN_ID, appeal, reply_markup=inline)
            else:
                bot.send_photo(
                    ADMIN_ID, message.photo[1].file_id, appeal, reply_markup=inline
                )
            bot.send_message(
                message.chat.id,
                "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                reply_markup=markups.main,
            )
        except:
            msg = bot.send_message(
                message.chat.id, "–£–ø—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markups.appeal
            )
            bot.register_next_step_handler(msg, finishing)
        try:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                bot.send_message(nextAdmin, appeal, reply_markup=inline)
            else:
                bot.send_photo(
                    nextAdmin, message.photo[1].file_id, appeal, reply_markup=inline)
        except Exception as e:
            print(e)
        print

        connection = pymysql.connect(
            host="localhost",
            user="root",
            password="9R3BhW049TF6",
            database="buyforton",
            cursorclass=pymysql.cursors.DictCursor
        )

        with connection:
            with connection.cursor() as cursor:
                # Create a new record
                sql = "INSERT INTO `buyforton_appeals` (`message_id`, `nickname`, `chat_id`, `price`, `name`, `wallet`, `type`, `quantity`) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
                cursor.execute(
                    sql,
                    (
                        message.message_id,
                        message.from_user.first_name,
                        message.chat.id,
                        price,
                        itemName,
                        wallet,
                        item_type,
                        quantity
                    )
                )
            connection.commit()


@bot.message_handler(regexp=regexps.support)
def support_first(message):
    msg = bot.send_message(
        message.chat.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º", reply_markup=markups.appeal
    )
    bot.register_next_step_handler(msg, support)


def support(message):
    if message.text == regexps.cancel:
        bot.send_message(message.chat.id, "–æ—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        bot.forward_message(nextAdmin, message.chat.id, message.message_id)
        bot.send_message(
            message.chat.id,
            "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –º—ã –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º",
            reply_markup=markups.main,
        )


@bot.message_handler(regexp=regexps.donate)
def donate(message):
    photo = open("img/qr_vip.png", "rb")
    bot.send_photo(
        message.chat.id,
        photo,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TON –ø–æ –∞–¥—Ä–µ—Å—É: 0:d013df48b33ff5479357b651499846eda4db2a3bac3d1926def3693403192d59 –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥",
    )


@bot.message_handler(regexp=regexps.vip)
def buy_vip(message):
    photo = open("img/qr_vip.png", "rb")
    bot.send_photo(
        message.chat.id,
        photo,
        "–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ n TON –ø–æ –∞–¥—Ä–µ—Å—É: "
        + TON_ADRESS
        + " –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ (QR –ø–æ–∫–∞ –Ω–µ —Ç–æ—Ç)",
    )


@bot.callback_query_handler(func=lambda message: message.data == "back")
@bot.message_handler(regexp=regexps.shopcart)
def shopcart(message):
    connection = pymysql.connect(
        host="localhost",
        user="root",
        password="9R3BhW049TF6",
        database="buyforton",
        cursorclass=pymysql.cursors.DictCursor
    )
    with connection:
        with connection.cursor() as cursor:
            sql = "SELECT `message_id` FROM `shopwheels` WHERE `user_id`=%s"
            cursor.execute(sql, (message.from_user.id))
            result = cursor.fetchall()
    print(type(result))
    shpwl_markup = telebot.types.InlineKeyboardMarkup()
    if len(result) != 0:
        for i in tuple(result):
            btn = telebot.types.InlineKeyboardButton(
                text="–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä " + str(i["message_id"]),
                callback_data="order" + str(i["message_id"]),
            )
            shpwl_markup.row(btn)
        try:
            bot.send_message(
                message.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", reply_markup=shpwl_markup
            )
        except:
            bot.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                message.message.chat.id,
                message.message.id,
                reply_markup=shpwl_markup
            )

    else:
        bot.send_message(message.chat.id, "–ü—É—Å—Ç–æ", reply_markup=shpwl_markup)


@bot.callback_query_handler(func=lambda c: c.data.find("order") != -1)
def show_order(c):
    connection = pymysql.connect(
        host="localhost",
        user="root",
        password="9R3BhW049TF6",
        database="buyforton",
        cursorclass=pymysql.cursors.DictCursor
    )
    buy_id = c.data
    buy_id = buy_id.replace("order", "")
    with connection:
        with connection.cursor() as cursor:
            # Read a single record
            sql = (
                "SELECT `price`, `name` FROM `buyforton_appeals` WHERE `message_id`=%s"
            )
            cursor.execute(sql, (buy_id))
            result = cursor.fetchone()

    order = telebot.types.InlineKeyboardMarkup()
    confirm = telebot.types.InlineKeyboardButton(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="confirm" + str(buy_id))
    order.row(confirm)
    order.row(markups.back)
    try:
        bot.edit_message_text(
            "–ó–ê–ö–ê–ó " + str(result["name"]) + " —Ü–µ–Ω–æ–π " +
            str(result["price"]) + " TON",
            c.message.chat.id,
            c.message.id,
            reply_markup=order
        )
    except:
        bot.send_message(c.message.chat.id, "–•–≤–∞—Ç–∏—Ç –±–∞–ª–æ–≤–∞—Ç—å—Å—è",
                         reply_markup=markups.main)
    print(result)


@bot.callback_query_handler(func=lambda c: c.data.find("confirm") != -1)
def send_money(c):
    bot.send_message(
        c.message.chat.id, "–î–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å BUYFORTON")
    connection = pymysql.connect(
        host="localhost",
        user="root",
        password="9R3BhW049TF6",
        database="buyforton",
        cursorclass=pymysql.cursors.DictCursor
    )
    buy_id = c.data.replace('confirm', '')
    with connection:
        with connection.cursor() as cursor:
            # Read a single record
            sql = (
                "SELECT `wallet`, `price` FROM `buyforton_appeals` WHERE `message_id`=%s"
            )
            cursor.execute(sql, (buy_id))
            result = cursor.fetchone()
        with connection.cursor() as cursor:
            # Read a single record
            sql = (
                "DELETE FROM `buyforton_appeals` WHERE `message_id` = %s"
            )
            cursor.execute(sql, (buy_id))
        with connection.cursor() as cursor:
            # Read a single record
            sql = (
                "DELETE FROM `shopwheels` WHERE `message_id` = %s"
            )
            cursor.execute(sql, (buy_id))
        connection.commit()

    bot.send_message(c.message.chat.id,
                     result['wallet'] + " " + str(result['price']))
    if result["price"] * 0.03 < 0.5:
        withdraw.send_ton(result['wallet'], result['price'] - 0.4)
    else:
        withdraw.send_ton(result['wallet'],
                          result['price'] - result['price'] * 0.03)


@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):

    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:

        if message.text.find("–û–ø–ª–∞—Ç–∏—Ç—å") != -1:
            global buy_id
            global price
            buy_id = int(message.text.replace("–û–ø–ª–∞—Ç–∏—Ç—å ", ""))
            connection = pymysql.connect(
                host="localhost",
                user="root",
                password="9R3BhW049TF6",
                database="buyforton",
                cursorclass=pymysql.cursors.DictCursor
            )
            with connection:
                with connection.cursor() as cursor:
                    # Read a single record
                    sql = "SELECT `price` FROM `buyforton_appeals` WHERE `message_id`=%s"
                    cursor.execute(sql, (buy_id))
                    result = cursor.fetchone()
                price = result["price"]

                msg = bot.send_message(
                    message.chat.id,
                    "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} —Ç–æ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫: ".format(
                        price=price)
                    + TON_ADRESS
                    + " —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º ¬´kuna-2gs4kaytt5¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ø–æ —Å—Å—ã–ª–∫–µ \n https://telegra.ph/BUYFORTON-Oplata-03-04",
                    reply_markup=markups.transaction,
                )
                bot.register_next_step_handler(msg, confirmation)
        elif message.chat.id == ADMIN_ID:
            try:
                bot.send_message(
                    message.reply_to_message.chat.id,
                    message.text,
                    reply_markup=markups.main,
                )
            except Exception as e:
                print(e)


def confirmation(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=markups.main)
    else:
        try:
            msg = bot.send_message(
                message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", reply_markup=markups.transaction
            )
            bot.register_next_step_handler(msg, confirmation_second)
        except Exception as e:
            print(e)
            bot.send_message(message.chat.id, "Something went wrong: ")


def confirmation_second(message):
    global buy_id
    global price
    global name

    bot.send_message(message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")

    connection = pymysql.connect(
        host="localhost",
        user="root",
        password="9R3BhW049TF6",
        database="buyforton",
        cursorclass=pymysql.cursors.DictCursor
    )

    tr_chk = transaction_checker.check_transaction(message.text)
    try:
        msg_chk = transaction_checker.check_message(
            tr_chk["transactions"][0]["out_msgs"][0]
        )

        if (
            tr_chk["transactions"][0]["status"] == 3
            and msg_chk["messages"][0]["dst"] == TON_ADRESS
            and tr_chk["transactions"][0]["balance_delta"] <= config.float_to_hex(price)
        ):

            with connection:
                with connection.cursor() as cursor:
                    # Read a single record
                    sql = "SELECT `chat_id`, `price`, `nickname` FROM `buyforton_appeals` WHERE `message_id`=%s"
                    cursor.execute(sql, (buy_id))
                    result = cursor.fetchone()
                with connection.cursor() as cursor:
                    sql = "INSERT INTO `shopwheels` (`message_id`, `user_id`, `seller_id`) VALUES (%s, %s, %s)"
                    cursor.execute(
                        sql, (buy_id, message.chat.id, result["chat_id"]))
                with connection.cursor() as cursor:
                    sql = "UPDATE `quantity` = `quantity` - 1 WHERE `message_id` = %s"
                    cursor.execute(sql, (buy_id))
                    result_another = cursor.fetchone()
                connection.commit()
            bot.send_message(
                result["chat_id"],
                '–í–∞—à —Ç–æ–≤–∞—Ä —Ü–µ–Ω–æ–π {price} TON –æ–ø–ª–∞—á–µ–Ω —é–∑–µ—Ä–æ–º <a href="tg://user?id={chat_id}">{nickname}</a> '.format(
                    price=result["price"], chat_id=result["chat_id"], nickname=result["nickname"]),
                reply_markup=markups.main
            )
            bot.send_message(ADMIN_ID, "–£–¥–∞–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–∫–∞–∑ " + str(buy_id))
            for i in admins_list:
                bot.send_message(i, "–£–¥–∞–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–∫–∞–∑ " + str(buy_id))
            bot.send_message(
                message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=markups.main
            )
            if result_another['quantity'] == 0:
                bot.send_message(ADMIN_ID, "—É–¥–∞–ª–∏—Ç—å " + str(buy_id))
        else:
            msg = bot.send_message(
                message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=markups.transaction
            )
            bot.register_next_step_handler(msg, confirmation)
    except:
        msg = bot.send_message(
            message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—â–µ —Ä–∞–∑.", reply_markup=markups.transaction
        )
        bot.register_next_step_handler(msg, confirmation_second)


if __name__ == "__main__":
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(e)
        pass
